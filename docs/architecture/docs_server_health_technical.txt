# 🏥 Server Health Monitoring System - Technical Documentation

## 📋 **Overview**

The Server Health Monitoring System is a comprehensive real-time monitoring solution for GUST-MARK-1 Rust servers. It features a sophisticated 75/25 layout with performance charts, status cards, command tracking, and real-time data integration.

## 🎯 **System Architecture**

### **High-Level Design**
```
┌─────────────────────────────────────────────────────────────┐
│                Server Health System                         │
├─────────────────────────────────────────────────────────────┤
│ Frontend Layer (75/25 Layout)                              │
│ ┌─────────────────────────┐ ┌─────────────────────────────┐ │
│ │ Left Side (75%)         │ │ Right Side (25%)            │ │
│ │ • Status Cards          │ │ • Command Feed              │ │
│ │ • Performance Charts    │ │ • Real-time Updates         │ │
│ │ • Health Metrics        │ │ • Type Filtering            │ │
│ └─────────────────────────┘ └─────────────────────────────┘ │
├─────────────────────────────────────────────────────────────┤
│ API Layer                                                   │
│ • Status API     • Charts API     • Commands API           │
│ • Trends API     • Tracking API   • Heartbeat API          │
├─────────────────────────────────────────────────────────────┤
│ Data Integration Layer                                      │
│ • Logs System    • Health Storage  • Command Tracking      │
│ • Real-time Data • Historical Data • Performance Metrics   │
└─────────────────────────────────────────────────────────────┘
```

## 🔧 **Technical Implementation**

### **Backend Components**

#### **1. Route Handler (`routes/server_health.py`)**
```python
# Core API endpoints for server health monitoring
@server_health_bp.route('/api/server_health/status/<server_id>')
@require_auth
def get_health_status(server_id):
    """Real-time health status with logs integration"""
    
    # Get real player data from logs system
    real_player_data = get_real_player_data_from_logs(server_id)
    
    if real_player_data:
        # Calculate health metrics from real data
        current_players = real_player_data['current']
        max_players = real_player_data['max']
        
        # Determine health status
        status = determine_health_status(current_players, max_players)
        
        # Generate derived metrics
        metrics = calculate_derived_metrics(current_players)
        
        return jsonify({
            'success': True,
            'status': status,
            'health_data': format_health_data(metrics),
            'server_id': server_id
        })
```

#### **2. Storage System (`utils/server_health_storage.py`)**
```python
class ServerHealthStorage:
    """Dual storage system with MongoDB + In-memory fallback"""
    
    def __init__(self, db=None, user_storage=None):
        self.db = db  # MongoDB connection
        self.user_storage = user_storage  # In-memory storage
        
        # Memory storage for real-time data
        self.command_history = []  # 24h command tracking
        self.health_snapshots = []  # Health data points
        self.performance_data = []  # Trend analysis
    
    def store_health_snapshot(self, server_id, health_data):
        """Store health snapshot with dual storage"""
        snapshot = {
            "snapshot_id": str(uuid.uuid4()),
            "server_id": server_id,
            "health_data": health_data,
            "timestamp": datetime.utcnow()
        }
        
        # MongoDB storage
        if self.db:
            collection = self.db['server_health_snapshots']
            collection.insert_one(snapshot)
        
        # Memory fallback
        self._store_memory_fallback("health", snapshot)
```

#### **3. Real Data Integration**
```python
def get_real_player_data_from_logs(server_id):
    """Connect to working logs system for real data"""
    try:
        # Use same APIClient as working player count system
        from utils.api_client import APIClient
        api_client = APIClient()
        
        # Get server region for API call
        region = get_server_region(server_id)
        
        # Fetch logs using same method as working system
        result = api_client.get_server_logs(server_id, region)
        
        if result['success']:
            # Parse using same parser as working system
            player_data = api_client.parse_player_count_from_logs(result['data'])
            return player_data
            
    except Exception as e:
        logger.error(f"Error getting real data: {e}")
        return None
```

### **Frontend Components**

#### **1. Main JavaScript Module (`templates/scripts/server_health.js.html`)**
```javascript
// Global data structure for server health
let serverHealthData = {
    currentServer: null,
    charts: {},
    commandFeed: [],
    healthStatus: {},
    autoRefresh: true,
    refreshInterval: null,
    isActive: false,
    filters: { active: 'all' }
};

// Main load function called by tab switching
function loadServerHealth() {
    try {
        serverHealthData.isActive = true;
        
        // Initialize system components
        initializeServerHealth();
        loadCurrentServer();
        
        // Load all data components
        loadHealthStatus();
        loadHealthCharts();
        loadCommandFeed();
        
        // Start auto-refresh
        startAutoRefresh();
        
    } catch (error) {
        console.error('Error loading Server Health:', error);
        showHealthError(error.message);
    }
}
```

#### **2. Chart.js Integration**
```javascript
function initializeHealthCharts() {
    // Destroy existing charts to prevent canvas reuse errors
    destroyExistingCharts();
    
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: { labels: { color: '#e5e7eb' } }
        },
        scales: {
            x: { ticks: { color: '#9ca3af' }, grid: { color: '#374151' } },
            y: { beginAtZero: true, ticks: { color: '#9ca3af' }, grid: { color: '#374151' } }
        }
    };
    
    // Initialize FPS chart
    const fpsCanvas = document.getElementById('fps-chart');
    if (fpsCanvas) {
        serverHealthData.charts.fps = new Chart(fpsCanvas, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'FPS',
                    data: [],
                    borderColor: '#22c55e',
                    backgroundColor: 'rgba(34, 197, 94, 0.1)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: chartOptions
        });
    }
}
```

#### **3. Real-time Data Updates**
```javascript
async function loadHealthStatus() {
    if (!serverHealthData.currentServer) return;
    
    try {
        // Show loading state
        updateHealthStatusDisplay({
            overall_status: 'loading',
            health_data: { metrics: { /* loading values */ } }
        });
        
        // Fetch real data from API
        const response = await fetch(`/api/server_health/status/${serverHealthData.currentServer}`);
        const result = await response.json();
        
        if (result.success) {
            // Update display with real data
            updateHealthStatusDisplay(result);
            serverHealthData.healthStatus = result;
        }
        
    } catch (error) {
        console.error('Error loading health status:', error);
        showDemoHealthData(); // Fallback to demo data
    }
}
```

## 📊 **Data Flow Architecture**

### **Real-time Data Pipeline**
```
┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│ Auto        │───▶│ Server Logs │───▶│ Logs API    │───▶│ Health APIs │
│ Commands    │    │ Storage     │    │ Parser      │    │ Integration │
│ (10s)       │    │ (serverinfo)│    │             │    │             │
└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘
                                                                   │
┌─────────────┐    ┌─────────────┐    ┌─────────────┐             │
│ Frontend    │◀───│ Status Cards│◀───│ Real-time   │◀────────────┘
│ Display     │    │ & Charts    │    │ Metrics     │
│ (30s)       │    │             │    │             │
└─────────────┘    └─────────────┘    └─────────────┘
```

### **Health Status Calculation**
```python
def determine_health_status(current_players, max_players):
    """Calculate health status from real player data"""
    if max_players == 0:
        return 'unknown'
    
    percentage = (current_players / max_players) * 100
    
    if current_players == 0:
        return 'warning'  # Empty server
    elif percentage > 85:
        return 'critical'  # Overcrowded
    elif percentage > 70:
        return 'warning'  # High load
    else:
        return 'healthy'  # Normal operation

def calculate_derived_metrics(current_players):
    """Generate realistic metrics from player count"""
    return {
        'response_time': 25 + (current_players * 1.5),
        'memory_usage': 1600 + (current_players * 35),
        'cpu_usage': 8 + min(current_players * 2, 75),
        'fps': max(25, 68 - (current_players * 0.6))
    }
```

## 🔄 **Auto-refresh System**

### **Frontend Auto-refresh**
```javascript
function startAutoRefresh() {
    if (serverHealthData.refreshInterval) {
        clearInterval(serverHealthData.refreshInterval);
    }
    
    serverHealthData.refreshInterval = setInterval(() => {
        if (serverHealthData.isActive && serverHealthData.currentServer) {
            console.log('🔄 Auto-refreshing Server Health data...');
            refreshHealthData();
        }
    }, 30000); // 30 seconds
    
    console.log('⏰ Auto-refresh started (30s intervals)');
}

function refreshHealthData() {
    if (!serverHealthData.currentServer) return;
    
    // Refresh all components
    loadHealthStatus();
    loadHealthCharts();
    loadCommandFeed();
}
```

### **Command Tracking Integration**
```javascript
// Integration with console system for command tracking
function trackConsoleCommand(server_id, command, type, user) {
    fetch('/api/server_health/command/track', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            server_id: server_id,
            command: command,
            type: type,
            user: user
        })
    }).then(response => response.json())
      .then(data => {
          if (data.success) {
              console.log('Command tracked:', command);
          }
      });
}
```

## 🎨 **UI/UX Architecture**

### **75/25 Layout Implementation**
```html
<!-- Server Health Layout Structure -->
<div class="flex flex-col lg:flex-row gap-6">
    <!-- LEFT SIDE: Performance Charts (75%) -->
    <div class="flex-1 lg:w-3/4 space-y-4">
        <!-- Status Cards Row -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div class="health-status-card bg-gray-800 p-4 rounded-lg">
                <div class="flex items-center justify-between">
                    <span class="text-gray-400">System Health</span>
                    <span id="health-status-indicator" class="w-3 h-3 rounded-full"></span>
                </div>
                <div id="health-status-text" class="text-xl font-semibold mt-2">System unknown</div>
                <div class="w-full bg-gray-700 rounded-full h-2 mt-2">
                    <div id="health-progress-bar" class="h-2 rounded-full bg-green-500 transition-all duration-500"></div>
                </div>
            </div>
            <!-- Additional status cards... -->
        </div>
        
        <!-- Performance Charts -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div class="bg-gray-800 p-4 rounded-lg">
                <h3 class="text-white font-semibold mb-4">FPS Performance</h3>
                <div class="relative h-64">
                    <canvas id="fps-chart"></canvas>
                </div>
            </div>
            <!-- Additional charts... -->
        </div>
    </div>
    
    <!-- RIGHT SIDE: Command Feed (25%) -->
    <div class="lg:w-1/4">
        <div class="bg-gray-800 rounded-lg h-full flex flex-col">
            <!-- Command feed implementation -->
        </div>
    </div>
</div>
```

### **Status Card Updates**
```javascript
function updateHealthStatusDisplay(data) {
    // Update main health status
    const statusElement = document.getElementById('health-status-text');
    const progressBar = document.getElementById('health-progress-bar');
    
    if (statusElement) {
        const status = data.overall_status || 'unknown';
        statusElement.textContent = `System ${status}`;
        statusElement.className = `text-xl font-semibold mt-2 text-${getStatusColor(status)}-400`;
    }
    
    if (progressBar) {
        const percentage = data.health_data?.health_percentage || 75;
        progressBar.style.width = `${percentage}%`;
        progressBar.className = `h-2 rounded-full transition-all duration-500 ${getHealthBarColor(data.overall_status)}`;
    }
    
    // Update individual metrics
    const metrics = data.health_data?.metrics || {};
    updateMetricDisplay('response-time', metrics.response_time, 'ms');
    updateMetricDisplay('memory-usage', metrics.memory_usage, 'MB');
    updateMetricDisplay('cpu-usage', metrics.cpu_usage, '%');
    updateMetricDisplay('player-count', metrics.player_count, '');
}
```

## 🔍 **Chart.js Integration**

### **Chart Cleanup System**
```javascript
function destroyExistingCharts() {
    console.log('🧹 Destroying existing charts...');
    
    // Destroy Chart.js instances
    Object.keys(serverHealthData.charts).forEach(chartKey => {
        const chart = serverHealthData.charts[chartKey];
        if (chart && typeof chart.destroy === 'function') {
            try {
                chart.destroy();
                console.log(`✅ Destroyed ${chartKey} chart`);
            } catch (error) {
                console.warn(`⚠️ Error destroying ${chartKey} chart:`, error);
            }
        }
    });
    
    // Clear charts object
    serverHealthData.charts = {};
    
    // Destroy orphaned Chart.js instances
    const canvasElements = ['fps-chart', 'players-chart'];
    canvasElements.forEach(canvasId => {
        const canvas = document.getElementById(canvasId);
        if (canvas) {
            const existingChart = Chart.getChart(canvas);
            if (existingChart) {
                existingChart.destroy();
            }
        }
    });
}
```

### **Real-time Chart Updates**
```javascript
function updateCharts(chartData) {
    // Update FPS chart
    if (serverHealthData.charts.fps && chartData.fps_chart) {
        const fpsChart = serverHealthData.charts.fps;
        fpsChart.data.labels = chartData.fps_chart.labels || [];
        fpsChart.data.datasets[0].data = chartData.fps_chart.datasets[0].data || [];
        fpsChart.update('none'); // No animation for smoother updates
    }
    
    // Update Players chart
    if (serverHealthData.charts.players && chartData.players_chart) {
        const playersChart = serverHealthData.charts.players;
        playersChart.data.labels = chartData.players_chart.labels || [];
        playersChart.data.datasets[0].data = chartData.players_chart.datasets[0].data || [];
        playersChart.update('none');
    }
}
```

## 🔐 **Security Implementation**

### **Authentication Integration**
```python
# All endpoints protected with existing auth system
@server_health_bp.route('/api/server_health/status/<server_id>')
@require_auth
def get_health_status(server_id):
    # Secured endpoint implementation
    pass

# Input validation
def validate_server_id(server_id):
    if not server_id or len(server_id) > 20:
        raise ValueError("Invalid server ID")
    
    # Additional validation logic
    if not re.match(r'^[a-zA-Z0-9_-]+$', server_id):
        raise ValueError("Invalid server ID format")
```

### **Data Sanitization**
```javascript
function safeEscapeHtml(text) {
    if (!text) return '';
    
    // Use existing escapeHtml if available
    if (typeof window.escapeHtml === 'function') {
        return window.escapeHtml(text);
    }
    
    // Safe fallback
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
```

## 📈 **Performance Optimization**

### **Memory Management**
```python
def cleanup_old_data(self):
    """Automatic cleanup of old data"""
    try:
        # Clean MongoDB collections
        cutoff_commands = datetime.utcnow() - timedelta(hours=24)
        cutoff_health = datetime.utcnow() - timedelta(days=7)
        
        # MongoDB cleanup
        if self.db:
            self.db['server_health_commands'].delete_many({"timestamp": {"$lt": cutoff_commands}})
            self.db['server_health_snapshots'].delete_many({"timestamp": {"$lt": cutoff_health}})
        
        # Memory cleanup
        self._cleanup_memory_storage()
        
    except Exception as e:
        logger.error(f"Cleanup error: {e}")
```

### **Efficient Data Retrieval**
```python
def get_health_trends(self, server_id, hours=6):
    """Optimized data retrieval with limited scope"""
    try:
        cutoff = datetime.utcnow() - timedelta(hours=hours)
        
        # MongoDB query with index optimization
        query = {"timestamp": {"$gte": cutoff}, "server_id": server_id}
        snapshots = list(self.db['server_health_snapshots']
                        .find(query)
                        .sort("timestamp", 1)
                        .limit(100))  # Limit for performance
        
        return self._process_snapshots(snapshots)
        
    except Exception as e:
        logger.error(f"Error retrieving trends: {e}")
        return self._empty_trends_response()
```

## 🧪 **Error Handling & Fallbacks**

### **Graceful Degradation**
```javascript
function showHealthError(message) {
    console.error('🚨 Server Health Error:', message);
    
    // Show user-friendly error
    const errorDiv = document.getElementById('health-error-message');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
    }
    
    // Fall back to demo data
    showDemoHealthData();
}

function showDemoHealthData() {
    const demoData = {
        overall_status: 'healthy',
        health_data: {
            health_percentage: 85,
            metrics: {
                response_time: 45,
                memory_usage: 512,
                cpu_usage: 25,
                player_count: 12
            }
        }
    };
    
    updateHealthStatusDisplay(demoData);
    console.log('📊 Demo health data displayed');
}
```

### **API Error Recovery**
```python
def get_fallback_health_status(server_id):
    """Fallback when real data unavailable"""
    return jsonify({
        'success': True,
        'status': 'warning',
        'health_data': {
            'overall_status': 'warning',
            'health_percentage': 65,
            'metrics': {
                'response_time': 45,
                'memory_usage': 2048,
                'cpu_usage': 25,
                'player_count': 0,
                'max_players': 100,
                'fps': 60,
                'uptime': 86400
            },
            'data_source': 'fallback_demo'
        },
        'server_id': server_id
    })
```

## 🔧 **Integration Points**

### **Console System Integration**
```javascript
// Automatic command tracking when commands are sent
function sendConsoleCommand() {
    // Existing console command logic...
    
    // Track command for health monitoring
    if (command.toLowerCase() === 'serverinfo') {
        trackConsoleCommand(serverId, command, 'auto', 'System');
    }
}
```

### **Logs System Integration**
```python
# Direct integration with working logs API
def get_real_player_data_from_logs(server_id):
    try:
        # Use same APIClient as working player count
        api_client = APIClient()
        
        # Get server region
        region = get_server_region(server_id)
        
        # Fetch logs using identical method
        result = api_client.get_server_logs(server_id, region)
        
        if result['success']:
            # Parse using same parser
            return api_client.parse_player_count_from_logs(result['data'])
            
    except Exception as e:
        logger.error(f"Logs integration error: {e}")
        return None
```

## 📋 **API Reference**

### **Core Endpoints**
```
GET  /api/server_health/status/<server_id>     - Real-time health status
GET  /api/server_health/charts/<server_id>     - Chart data for visualization
GET  /api/server_health/commands/<server_id>   - Command execution history
GET  /api/server_health/trends/<server_id>     - Performance trend analysis
POST /api/server_health/command/track          - Track command execution
GET  /api/server_health/heartbeat              - System health check
```

### **Response Formats**
```json
// Health Status Response
{
    "success": true,
    "status": "healthy",
    "health_data": {
        "overall_status": "healthy",
        "health_percentage": 85,
        "metrics": {
            "response_time": 25,
            "memory_usage": 1600,
            "cpu_usage": 15,
            "player_count": 12,
            "max_players": 100,
            "fps": 65
        }
    },
    "server_id": "1736296",
    "checked_at": "2025-06-19T15:30:00Z"
}
```

---

*Technical documentation completed: June 19, 2025*  
*Status: ✅ Complete implementation with real-time data integration*  
*Next update: As needed for system enhancements*