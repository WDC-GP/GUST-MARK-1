"""
Common imports used across the GUST Bot Enhanced project
Generated by GUST-MARK-1 optimization script on 06/18/2025 17:56:43

This module consolidates imports that are used in 3 or more files
to reduce duplication and improve startup performance.
"""

# Standard library imports
import os
import sys
import json
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Any

# Third-party imports - Flask ecosystem  
try:
    from flask import Flask, request, session, jsonify, render_template, redirect, url_for
    from werkzeug.security import generate_password_hash, check_password_hash
    FLASK_AVAILABLE = True
except ImportError:
    FLASK_AVAILABLE = False

# Third-party imports - Database
try:
    from pymongo import MongoClient
    from pymongo.errors import PyMongoError
    from bson import ObjectId
    MONGODB_AVAILABLE = True
except ImportError:
    MONGODB_AVAILABLE = False

# Third-party imports - Utilities
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False

from functools import wraps

# Project-specific imports (handle import errors gracefully)
try:
    from config import Config
    CONFIG_AVAILABLE = True
except ImportError:
    CONFIG_AVAILABLE = False
    Config = None

# Logging configuration
def setup_logging(name: str, level: str = 'INFO') -> logging.Logger:
    """Set up standardized logging for modules"""
    logger = logging.getLogger(name)
    logger.setLevel(getattr(logging, level.upper()))
    
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    
    return logger

# Export commonly used items for easy importing
__all__ = [
    'os', 'sys', 'json', 'time', 'logging', 'datetime', 'timedelta',
    'Dict', 'List', 'Optional', 'Union', 'Any', 'wraps', 'setup_logging'
]

# Conditionally add to __all__ based on availability
if FLASK_AVAILABLE:
    __all__.extend(['Flask', 'request', 'session', 'jsonify', 'render_template', 'redirect', 'url_for'])
    __all__.extend(['generate_password_hash', 'check_password_hash'])

if MONGODB_AVAILABLE:
    __all__.extend(['MongoClient', 'PyMongoError', 'ObjectId'])

if REQUESTS_AVAILABLE:
    __all__.append('requests')

if CONFIG_AVAILABLE:
    __all__.append('Config')
