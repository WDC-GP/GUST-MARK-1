"""
"""
"""
Validation helper functions for GUST Bot Enhanced
Consolidates input validation patterns used across the project
Generated by GUST-MARK-1 optimization script on 06/18/2025 17:56:46

This module provides standardized validation functions for common
input types and patterns used throughout the application.
"""

# Standard library imports
import logging
import re

# Other imports
from typing import Dict, List, Optional, Union, Tuple



logger = logging.getLogger(__name__)

class ValidationHelper:
    """Centralized validation functions with consistent error handling"""
    
    # Common regex patterns
    USERNAME_PATTERN = re.compile(r'^[a-zA-Z0-9_-]{3,30}$')
    SERVER_ID_PATTERN = re.compile(r'^[a-zA-Z0-9_-]{1,50}$')
    NICKNAME_PATTERN = re.compile(r'^[a-zA-Z0-9_\-\s]{2,50}$')
    
    @staticmethod
    def validate_username(username: str) -> Tuple[bool, str]:
        """
        Validate G-Portal username format
        
        Args:
            username: Username string to validate
            
        Returns:
            Tuple of (is_valid, error_message)
        """
        if not username:
            return False, "Username is required"
        
        if not isinstance(username, str):
            return False, "Username must be a string"
        
        username = username.strip()
        
        if len(username) < 3:
            return False, "Username must be at least 3 characters"
        
        if len(username) > 30:
            return False, "Username must be no more than 30 characters"
        
        if not ValidationHelper.USERNAME_PATTERN.match(username):
            return False, "Username can only contain letters, numbers, underscores, and hyphens"
        
        return True, ""
    
    @staticmethod
    def validate_server_id(server_id: str) -> Tuple[bool, str]:
        """
        Validate server ID format
        
        Args:
            server_id: Server ID string to validate
            
        Returns:
            Tuple of (is_valid, error_message)
        """
        if not server_id:
            return False, "Server ID is required"
        
        if not isinstance(server_id, str):
            return False, "Server ID must be a string"
        
        server_id = server_id.strip()
        
        if len(server_id) < 1:
            return False, "Server ID cannot be empty"
        
        if len(server_id) > 50:
            return False, "Server ID must be no more than 50 characters"
        
        if not ValidationHelper.SERVER_ID_PATTERN.match(server_id):
            return False, "Server ID can only contain letters, numbers, underscores, and hyphens"
        
        return True, ""
    
    @staticmethod
    def validate_nickname(nickname: str) -> Tuple[bool, str]:
        """
        Validate user nickname format
        
        Args:
            nickname: Nickname string to validate
            
        Returns:
            Tuple of (is_valid, error_message)
        """
        if not nickname:
            return False, "Nickname is required"
        
        if not isinstance(nickname, str):
            return False, "Nickname must be a string"
        
        nickname = nickname.strip()
        
        if len(nickname) < 2:
            return False, "Nickname must be at least 2 characters"
        
        if len(nickname) > 50:
            return False, "Nickname must be no more than 50 characters"
        
        if not ValidationHelper.NICKNAME_PATTERN.match(nickname):
            return False, "Nickname can only contain letters, numbers, spaces, underscores, and hyphens"
        
        return True, ""
    
    @staticmethod
    def validate_balance(balance: Union[int, float, str]) -> Tuple[bool, str, float]:
        """
        Validate and normalize balance value
        
        Args:
            balance: Balance value to validate
            
        Returns:
            Tuple of (is_valid, error_message, normalized_value)
        """
        try:
            if isinstance(balance, str):
                balance = balance.strip()
                if not balance:
                    return False, "Balance cannot be empty", 0.0
                balance = float(balance)
            elif isinstance(balance, int):
                balance = float(balance)
            elif not isinstance(balance, float):
                return False, "Balance must be a number", 0.0
            
            if balance < 0:
                return False, "Balance cannot be negative", 0.0
            
            if balance > 999999999:  # 1 billion limit
                return False, "Balance too large (max: 999,999,999)", 0.0
            
            # Round to 2 decimal places
            balance = round(balance, 2)
            
            return True, "", balance
            
        except (ValueError, TypeError) as e:
            return False, f"Invalid balance format: {str(e)}", 0.0
    
    @staticmethod
    def validate_internal_id(internal_id: Union[int, str]) -> Tuple[bool, str, int]:
        """
        Validate user internal ID (1-9 digits)
        
        Args:
            internal_id: Internal ID to validate
            
        Returns:
            Tuple of (is_valid, error_message, normalized_value)
        """
        try:
            if isinstance(internal_id, str):
                internal_id = internal_id.strip()
                if not internal_id.isdigit():
                    return False, "Internal ID must contain only digits", 0
                internal_id = int(internal_id)
            elif not isinstance(internal_id, int):
                return False, "Internal ID must be a number", 0
            
            if internal_id < 1:
                return False, "Internal ID must be at least 1", 0
            
            if internal_id > 999999999:  # 9 digits max
                return False, "Internal ID must be no more than 9 digits", 0
            
            return True, "", internal_id
            
        except (ValueError, TypeError) as e:
            return False, f"Invalid internal ID format: {str(e)}", 0
    
    @staticmethod
    def validate_clan_tag(clan_tag: Optional[str]) -> Tuple[bool, str, str]:
        """
        Validate clan tag format (optional field)
        
        Args:
            clan_tag: Clan tag to validate (can be None/empty)
            
        Returns:
            Tuple of (is_valid, error_message, normalized_value)
        """
        if not clan_tag:
            return True, "", ""  # Clan tag is optional
        
        if not isinstance(clan_tag, str):
            return False, "Clan tag must be a string", ""
        
        clan_tag = clan_tag.strip().upper()
        
        if len(clan_tag) < 2:
            return False, "Clan tag must be at least 2 characters", ""
        
        if len(clan_tag) > 10:
            return False, "Clan tag must be no more than 10 characters", ""
        
        if not re.match(r'^[A-Z0-9]+$', clan_tag):
            return False, "Clan tag can only contain uppercase letters and numbers", ""
        
        return True, "", clan_tag
    
    @staticmethod
    def validate_request_data(data: Dict, required_fields: List[str]) -> Tuple[bool, str, Dict]:
        """
        Validate request data has required fields
        
        Args:
            data: Request data dictionary
            required_fields: List of required field names
            
        Returns:
            Tuple of (is_valid, error_message, cleaned_data)
        """
        if not isinstance(data, dict):
            return False, "Request data must be a dictionary", {}
        
        cleaned_data = {}
        missing_fields = []
        
        for field in required_fields:
            if field not in data:
                missing_fields.append(field)
            else:
                # Basic cleaning - strip strings
                value = data[field]
                if isinstance(value, str):
                    value = value.strip()
                cleaned_data[field] = value
        
        if missing_fields:
            return False, f"Missing required fields: {', '.join(missing_fields)}", {}
        
        return True, "", cleaned_data
    
    @staticmethod
    def sanitize_string(value: str, max_length: int = 255) -> str:
        """
        Sanitize string input for safe storage and display
        
        Args:
            value: String value to sanitize
            max_length: Maximum allowed length
            
        Returns:
            Sanitized string
        """
        if not isinstance(value, str):
            return str(value)
        
        # Strip whitespace
        value = value.strip()
        
        # Remove potentially dangerous characters
        value = re.sub(r'[<>"\']', '', value)
        
        # Limit length
        if len(value) > max_length:
            value = value[:max_length]
        
        return value

# Utility functions for common validation patterns
def validate_user_registration_data(data: Dict) -> Tuple[bool, str, Dict]:
    """Validate user registration request data"""
    required_fields = ['userId', 'nickname', 'internalId']
    
    is_valid, error, cleaned_data = ValidationHelper.validate_request_data(data, required_fields)
    if not is_valid:
        return False, error, {}
    
    # Validate individual fields
    username_valid, username_error = ValidationHelper.validate_username(cleaned_data['userId'])
    if not username_valid:
        return False, f"Invalid username: {username_error}", {}
    
    nickname_valid, nickname_error = ValidationHelper.validate_nickname(cleaned_data['nickname'])
    if not nickname_valid:
        return False, f"Invalid nickname: {nickname_error}", {}
    
    id_valid, id_error, normalized_id = ValidationHelper.validate_internal_id(cleaned_data['internalId'])
    if not id_valid:
        return False, f"Invalid internal ID: {id_error}", {}
    
    cleaned_data['internalId'] = normalized_id
    
    return True, "", cleaned_data

def validate_server_data(data: Dict) -> Tuple[bool, str, Dict]:
    """Validate server-related request data"""
    if 'serverId' in data:
        server_valid, server_error = ValidationHelper.validate_server_id(data['serverId'])
        if not server_valid:
            return False, f"Invalid server ID: {server_error}", {}
    
    return True, "", data

# Export validation classes and functions
__all__ = [
    'ValidationHelper', 'validate_user_registration_data', 'validate_server_data'
]
